---
// Nessun framework esterno, solo Astro nativo
import { normalizeBaseUrl } from '../lib/paths';
import { menuItems, getMenuItemUrl } from '../config/navigation';

export interface Props {
  baseUrl: string;
}

const { baseUrl } = Astro.props;
const normalizedBaseUrl = normalizeBaseUrl(baseUrl);

// Mappa delle icone per convertire i nomi in SVG paths di Heroicons
const iconPaths: Record<string, string> = {
  'HomeIcon': 'M2.25 12l8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25',
  'ChartBarIcon': 'M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 013 19.875v-6.75zM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V8.625zM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V4.125z',
  'TableCellsIcon': 'M3.375 3C2.339 3 1.5 3.84 1.5 4.875v.75c0 1.036.84 1.875 1.875 1.875h17.25c1.035 0 1.875-.84 1.875-1.875v-.75C22.5 3.839 21.66 3 20.625 3H3.375zM3.375 9.75c-1.036 0-1.875.84-1.875 1.875v.75c0 1.036.84 1.875 1.875 1.875h17.25c1.035 0 1.875-.84 1.875-1.875v-.75c0-1.036-.84-1.875-1.875-1.875H3.375zM3.375 16.5c-1.036 0-1.875.84-1.875 1.875v.75c0 1.036.84 1.875 1.875 1.875h17.25c1.035 0 1.875-.84 1.875-1.875v-.75c0-1.036-.84-1.875-1.875-1.875H3.375z',
  'InformationCircleIcon': 'M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z'
};
---

<div class="hamburger-menu" data-base-url={baseUrl}>
  <!-- Hamburger Button -->
  <button class="hamburger-btn" aria-label="Menu di navigazione">
    <span class="line line-1"></span>
    <span class="line line-2"></span>
    <span class="line line-3"></span>
  </button>

  <!-- Overlay -->
  <div class="overlay hidden"></div>

  <!-- Menu Dropdown -->
  <nav class="menu-dropdown">
    <div class="menu-content">
      {menuItems.map((item) => (
        <a href={getMenuItemUrl(item, baseUrl)} class="menu-item">
          <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d={iconPaths[item.icon]} />
          </svg>
          {item.label}
        </a>
      ))}
    </div>
  </nav>
</div>

<style>
  .hamburger-menu {
    position: relative;
  }

  .hamburger-btn {
    @apply flex flex-col justify-center items-center w-8 h-8 bg-transparent border-none cursor-pointer p-1;
  }

  .line {
    @apply bg-gray-600 block transition-all duration-300 ease-out h-0.5 w-6 rounded-sm;
  }

  .line-1 {
    @apply -translate-y-0.5;
  }

  .line-2 {
    @apply my-0.5;
  }

  .line-3 {
    @apply translate-y-0.5;
  }

  .hamburger-menu.open .line-1 {
    @apply rotate-45 translate-y-1;
  }

  .hamburger-menu.open .line-2 {
    @apply opacity-0;
  }

  .hamburger-menu.open .line-3 {
    @apply -rotate-45 -translate-y-1;
  }

  .overlay {
    @apply fixed inset-0 bg-black bg-opacity-50 z-40;
  }

  .menu-dropdown {
    @apply absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-50 transition-all duration-200 ease-in-out opacity-0 -translate-y-2 invisible;
  }

  .hamburger-menu.open .menu-dropdown {
    @apply opacity-100 translate-y-0 visible;
  }

  .menu-content {
    @apply py-2;
  }

  .menu-item {
    @apply block px-4 py-2 text-gray-700 hover:bg-gray-100 transition-colors duration-150 flex items-center;
  }

  .icon {
    @apply w-5 h-5 mr-3 text-gray-500;
  }
</style>

<script>
  // Script inline di Astro - nativo e semplice
  document.addEventListener('DOMContentLoaded', () => {
    const hamburgerMenus = document.querySelectorAll('.hamburger-menu');

    hamburgerMenus.forEach(menu => {
      const btn = menu.querySelector('.hamburger-btn');
      const overlay = menu.querySelector('.overlay');
      const menuItems = menu.querySelectorAll('.menu-item');

      const toggleMenu = () => {
        menu.classList.toggle('open');
        overlay?.classList.toggle('hidden');
      };

      const closeMenu = () => {
        menu.classList.remove('open');
        overlay?.classList.add('hidden');
      };

      btn?.addEventListener('click', toggleMenu);
      overlay?.addEventListener('click', closeMenu);
      menuItems.forEach(item => {
        item.addEventListener('click', closeMenu);
      });
    });
  });
</script>
